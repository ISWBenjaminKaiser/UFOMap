#!/usr/bin/env python
PACKAGE = "ufomap_mapping"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#           Name                 Type      Level Description                                            Default Min  Max
gen.add("frame_id",              str_t,    1,    "Frame id",                                            "map")

gen.add("max_range",             double_t, 2,    "Max range (m) when integrating data into map",        7.0,    0.0, 100.0)

gen.add("insert_discrete",       bool_t,   3,    "Enable discrete integration",                         True)
gen.add("insert_depth",          int_t,    3,    "Integration depth of the octree",                     0,      0,   10)
gen.add("insert_n",              int_t,    3,    "The n in integration for UFOMap, 0 or 2 recommended", 0,      0,   10)
gen.add("clear_robot",           bool_t,   3,    "Clear map at robot position",                         True)

gen.add("robot_height",          double_t, 4,    "Robot height (m)",                                    0.2,    0.0, 100.0)
gen.add("robot_radius",          double_t, 4,    "Robot radius (m)",                                    0.5,    0.0, 100.0)

gen.add("pub_rate",              double_t, 5,    "How often to publish map (/s)",                       1.0,    0.0, 100.0)

gen.add("transform_timeout",     double_t, 6,    "How long to wait for transform (s)",                  0.1,    0.0, 100.0)

gen.add("cloud_in_queue_size",   int_t,    7,    "Queue size for cloud_in",                             10,     0,   10000)
gen.add("map_queue_size",        int_t,    7,    "Queue size for map",                                  1,      0,   10000)
gen.add("map_binary_queue_size", int_t,    7,    "Queue size for map_binary",                           1,      0,   10000)
gen.add("map_cloud_queue_size",  int_t,    7,    "Queue size for map_cloud",                            1,      0,   10000)

gen.add("map_latch",             bool_t,   8,    "Enable latched map topic",                            False)
gen.add("map_binary_latch",      bool_t,   8,    "Enable latched map binary topic",                     False)
gen.add("map_cloud_latch",       bool_t,   8,    "Enable latched map cloud topic",                      False)

# Filters
gen.add("enable_voxel_grid_filter",     bool_t, 9,    "Enable voxel grid filter",                  True)

gen.add("enable_remove_nan",     bool_t, 9,    "Enable remove NaN filter",                  False)

gen.add("enable_statistical_outlier_removal",     bool_t, 9,    "Enable statistical outlier removal",                  True)
gen.add("statistical_outlier_removal_mean_k",        int_t,    9,    "Mean K for statistical outlier removal",                                  50,      0,   10000)
gen.add("statistical_outlier_removal_stddev",     double_t, 9,    "Stddev for statistical outlier removal",                  1.0,    0.0, 100.0)

gen.add("enable_radius_outlier_removal",     bool_t, 9,    "Enable radius outlier removal",                  True)
gen.add("radius_outlier_removal_radius",     double_t, 9,    "Radius for radius outlier removal",                  0.8,    0.0, 100.0)
gen.add("radius_outlier_removal_neighbors", int_t,    9,    "Number of neighbors for radius outlier removal",                           2,      0,   10000)

gen.add("enable_registration",     bool_t, 10,    "Enable registration",                  True)
gen.add("icp_correspondence_distance",     double_t, 10,    "ICP max correspondence distance",                  0.05,    0.0, 100.0)
gen.add("icp_max_iterations", int_t,    10,    "ICP maximum number of iterations (criterion 1)",                           50,      0,   10000)
gen.add("icp_transform_epsilon",     double_t, 10,    "ICP transformation epsilon (criterion 2)",                  1e-8,    0.0, 100.0)
gen.add("icp_euclidean_fitness_epsilon",     double_t, 10,    "ICP euclidean distance difference epsilon (criterion 3)",                  1.0,    0.0, 100.0)

exit(gen.generate(PACKAGE, "ufomap_mapping", "Server"))
